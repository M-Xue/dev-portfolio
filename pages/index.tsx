import type { NextPage } from 'next'
import Head from 'next/head'
import { useEffect, useRef, useState } from 'react'
import { About } from '../components/sections/about/About'
import { Education } from '../components/sections/education/Education'
import { Intro } from '../components/sections/intro/Intro'
import { LeftSidebar } from '../components/LeftSidebar'
import { RightSidebar } from '../components/RightSidebar'
import { TopBar } from '../components/Topbar'
import useOnScreen from '../hooks/useOnScreen'
import styles from '../styles/Home.module.css'
import { AnimatePresence } from "framer-motion"
import { WorkExperience } from '../components/sections/workExperience/WorkExperience'
import { CSSTransition } from 'react-transition-group';
import useHover from '../hooks/useHover'
import { MobileSidebar } from '../components/MobileSidebar'

interface SectionRefs {
  [name: string]: HTMLDivElement | null;
}

const Home: NextPage = () => {

  const topBarRef = useRef<HTMLDivElement | null>(null);
  const isVisibleTopBar = useOnScreen(topBarRef);
  const sectionRefs = useRef<SectionRefs>({});
  const recentlyDownloadedTimeout = useRef<any>(null);
  const toastRef = useRef<null | HTMLDivElement>(null);
  const toastTimeout = useRef<any>(null);
  const [isToastActive, setIsToastActive] = useState<boolean>(false);
  const [toastHoverRef, isToastHovered] = useHover<HTMLDivElement | null>();
  const downloadResume = () => {
    if (recentlyDownloadedTimeout.current === null) {
      let alink = document.createElement('a');
      alink.href = "Max-Xue-Resume.pdf";
      alink.target="_blank";
      alink.rel="noopener noreferrer";
      // alink.download = 'Max-Xue-Resume';
      alink.click();
      alink.remove();

      recentlyDownloadedTimeout.current = setTimeout(() => {
        recentlyDownloadedTimeout.current = null;
      }, 5000);

      setIsToastActive(true);
      if (toastTimeout.current === null) {
        toastTimeout.current = setTimeout(() => {
          setIsToastActive(false);
          toastTimeout.current = null;
        }, 5000);
      } else {
        clearTimeout(toastTimeout.current);
        toastTimeout.current = setTimeout(() => {
          setIsToastActive(false);
          toastTimeout.current = null;
        }, 5000);
      }
    }
  }

  useEffect(() => {
    return () => {
      if (recentlyDownloadedTimeout.current)
        clearTimeout(recentlyDownloadedTimeout.current);
    }
  }, [])

  const goToTop = () => {
    window.scrollTo({
        top: 0,
        behavior: "smooth",
    });
  };

  return (
    <>
      <Head>
        <title>MX Dev Portfolio</title>
        <meta name="Max Xue's Developer Portfolio" content="Generated by create next app" />
        {/* https://harrisonpim.com/blog/using-emoji-as-favicons */}
        <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>ðŸ–¥</text></svg>"></link>
      </Head>
      <div className={styles.background}></div>
      <div className={styles.container}>

        <TopBar ref={topBarRef} sectionRefs={sectionRefs.current} downloadResume={downloadResume}/>

        <AnimatePresence>
          {!isVisibleTopBar && 
            <LeftSidebar sectionRefs={sectionRefs.current} downloadResume={downloadResume}/>
          }
        </AnimatePresence>
        <RightSidebar/>
        <MobileSidebar sectionRefs={sectionRefs.current} downloadResume={downloadResume}/>

        <main className={styles.main}>
          <div ref={(el) => {sectionRefs.current.intro = el;}} className={styles.sectionContainer}><Intro/></div>
          <div ref={(el) => {sectionRefs.current.about = el;}} className={styles.sectionContainer}><About/></div>
          <div ref={(el) => {sectionRefs.current.workExperience = el;}} className={styles.sectionContainer}><WorkExperience/></div>
          <div ref={(el) => {sectionRefs.current.education = el;}} className={styles.sectionContainer}><Education/></div>
        </main>

        <footer className={styles.footer}>
          Design inspired by <a target='_blank' rel="noreferrer" href="https://brittanychiang.com/#jobs">Brittany Chiang</a>
        </footer>

        <CSSTransition
          in={isToastActive || isToastHovered}
          nodeRef={toastRef}
          timeout={500} 
          unmountOnExit
          classNames={{
            enter: styles.toastEnter,
            enterActive: styles.toastEnterActive,
            enterDone: styles.toastEnterDone,
            exit: styles.toastExit,
            exitActive: styles.toastExitActive
          }}
        >
          <div className={styles.toastContainer} ref={(el) => {toastRef.current = el; toastHoverRef(el);}}><span>Downloaded Resume</span></div>
        </CSSTransition>
      </div>
    </>
  )
}

export default Home


// light: rgb(249,250,251) from TanStack and https://leerob.io/
// - font: black (or rgb(17,24,39))
// dark: rgb(27,31,36) from GitHub CoPilot
// - font: white

// Content width: 1200px

// Should embed prosemirror editor, google doc and messenger project in the page


// https://brittanychiang.com/
// https://tamalsen.dev/
// https://github.com/features/copilot
// https://iuri.is/
// https://www.codewonders.dev/about